"use client";

import React from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Cell,
} from "recharts";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";

// Full data format
interface FullVulnerabilityData {
  id: string;
  name: string;
  vulnerability: number;
  performanceGap: number;
  allocation: number;
}

// Simple data format
interface SimpleVulnerabilityData {
  name: string;
  value: number;
}

interface VulnerabilityChartProps {
  data: FullVulnerabilityData[] | SimpleVulnerabilityData[];
  title: string;
  description?: string;
  height?: number;
  colorScheme?: "blue" | "green" | "purple" | "amber";
}

export function VulnerabilityChart({
  data,
  title,
  description,
  height = 400,
  colorScheme = "blue"
}: VulnerabilityChartProps) {
  // Determine if using simple data format
  const isSimpleFormat = data.length > 0 && 'value' in data[0];
  
  // Format data for the chart
  const chartData = isSimpleFormat 
    ? (data as SimpleVulnerabilityData[]).map((item) => ({
        name: item.name,
        value: parseFloat((item.value * 100).toFixed(1))
      }))
    : (data as FullVulnerabilityData[]).map((item) => ({
        name: item.name,
        vulnerability: parseFloat((item.vulnerability * 100).toFixed(1)),
        performanceGap: parseFloat((item.performanceGap * 100).toFixed(1)),
        allocation: parseFloat(item.allocation.toFixed(1)),
      }));

  // Color function based on value or vulnerability score
  const getColor = (value: number) => {
    if (colorScheme === "green") {
      if (value < 10) return "#10b981"; // emerald-500
      if (value < 20) return "#22c55e"; // green-500
      return "#16a34a"; // green-600
    } else if (colorScheme === "purple") {
      if (value < 10) return "#8b5cf6"; // violet-500
      if (value < 20) return "#a855f7"; // purple-500
      return "#7c3aed"; // violet-600
    } else if (colorScheme === "amber") {
      if (value < 10) return "#f59e0b"; // amber-500
      if (value < 20) return "#d97706"; // amber-600
      return "#b45309"; // amber-700
    } else { // default blue
      if (value < 10) return "#3b82f6"; // blue-500
      if (value < 20) return "#2563eb"; // blue-600
      return "#1d4ed8"; // blue-700
    }
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>{title}</CardTitle>
        {description && <CardDescription>{description}</CardDescription>}
      </CardHeader>
      <CardContent>
        <ResponsiveContainer width="100%" height={height}>
          {isSimpleFormat ? (
            <BarChart
              data={chartData}
              margin={{
                top: 20,
                right: 30,
                left: 20,
                bottom: 60,
              }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="name" 
                angle={-45} 
                textAnchor="end" 
                height={50} 
                tick={{ fontSize: 12 }} 
              />
              <YAxis 
                label={{ 
                  value: "Percentage (%)", 
                  angle: -90, 
                  position: "insideLeft" 
                }} 
              />
              <Tooltip 
                formatter={(value) => [`${value}%`, "Value"]} 
              />
              <Bar 
                dataKey="value" 
                name="Value (%)" 
                fill="#3b82f6"
              >
                {chartData.map((entry, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={getColor(
                      isSimpleFormat 
                        ? (entry as { name: string; value: number }).value 
                        : 0
                    )} 
                  />
                ))}
              </Bar>
            </BarChart>
          ) : (
            <BarChart
              data={chartData}
              margin={{
                top: 20,
                right: 30,
                left: 20,
                bottom: 60,
              }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="name" 
                angle={-45} 
                textAnchor="end" 
                height={50} 
                tick={{ fontSize: 12 }} 
              />
              <YAxis 
                yAxisId="left"
                label={{ 
                  value: "Percentage (%)", 
                  angle: -90, 
                  position: "insideLeft" 
                }} 
              />
              <YAxis 
                yAxisId="right" 
                orientation="right" 
                label={{ 
                  value: "Allocation ($M)", 
                  angle: 90, 
                  position: "insideRight" 
                }} 
              />
              <Tooltip 
                formatter={(value, name) => {
                  if (name === "allocation") return [`$${value}M`, "Allocation"];
                  return [`${value}%`, name === "vulnerability" ? "Vulnerability" : "Performance Gap"];
                }} 
              />
              <Legend />
              <Bar 
                yAxisId="left" 
                dataKey="vulnerability" 
                name="Vulnerability" 
                fill="#1e40af"
              >
                {chartData.map((entry: any, index) => (
                  <Cell 
                    key={`cell-${index}`} 
                    fill={getColor(entry.vulnerability)} 
                  />
                ))}
              </Bar>
              <Bar 
                yAxisId="left" 
                dataKey="performanceGap" 
                name="Performance Gap" 
                fill="#6366f1"
              />
              <Bar 
                yAxisId="right" 
                dataKey="allocation" 
                name="Allocation ($M)" 
                fill="#a855f7"
              />
            </BarChart>
          )}
        </ResponsiveContainer>
      </CardContent>
    </Card>
  );
} 